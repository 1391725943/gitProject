元字符：
\d    包含一位数字     （0-9）
\D   包含 一位非数字
\s    包含一位空白字符    （空格 缩进 换行\n）
\S    包含一位非空白
\w    包含一位（字母 数字 下划线）
\W    包含一位非（字母 数字 下划线）
.    包含一位任意字符（换行不算）
\    转义字符（例如  \.   必须包含小数点 1.2）

量词
* 重复零次或更多次
+ 重复一次或更多次 
？ 重复零次或一次 
{n} 重复n次
 {n,} 重复n次或更多次
 {n,m} 重复n到m次

边界符  提示字符所处的位置，主要是有俩个字符。 
^ 表示匹配行首的文本（以谁开始）
$ 表示匹配行尾的文本（以谁结尾）

括号总结：
// 1、中括号 字符集合。匹配方括号中的任意字符 [ ]代表一个字符
    var reg = /^[abc]$/; 
 // 2、大括号、量词符，里面表示重复次数 
    var reg = /^a{3}$/; 
 // 3、小括号 表示优先级 
    var reg = /^(abc){3}$/;

标识符：
g    全局查找
i    不区分大小写

懒惰 解决方案使用全局标识符g

贪婪
贪婪模式： 根据匹配字符串以及表达式尽可能多的进行匹配，成为贪婪匹配模式  exec方法查看
例如：/a\d+/ 即可以匹配首字母为a的之后的许多数字，这个不进行限制

非贪婪
根据匹配字符串以及表达式尽可能少的进行匹配。
使用的方法就是在修饰匹配次数的特殊符号后再加上一个?号进行限制 如"*?","+?","{n,}?","{n,m}?"."??"
如：/a\d+?/即匹配的字符串为a为首字母，后面只能有一个数字

操作方法
replace    替换字符 2个参数
search    返回字符串的索引 1个参数
sting.match    返回符合条件的所有参数 并构成数组返回  1个参数（正则表达式）
reg.exec(string)    返回符合条件的参数


// 1.邮政编码：由6个数字构成，第一位不可以是0
var reg1 = /^[1-9]\d{5}$/
// 2.手机号码：由13/15/17/18开头的11位数字
var reg2 = /^1[3|5|7|8]\d{9}$/
// 3.QQ号：第一位不可以是0，位数在5-12位数字构成
var reg3 = /^[1-9]{4,11}$/
// 4.检查是否是压缩文件：文件名由字母、数字、下划线构成，不可以以数字开头，后缀为.zip/rar/gz
var reg4 = /^[a-z|A-Z|_]\w*\.(zip|rar|gz)$/
// var reg4 = /^[a-zA-Z_]\w*\.(zip|rar|gz)$/;
// 5.密码：字母、数字、下划线构成，6-20位
var reg5 = /^\w{6,20}$/
// 6.用户名：字母、数字、下划线构成，6-16位，不能以数字开头
var reg6 = /^[a-z|A-Z|_]\w{5,15}$/
// 7.输入年龄：只能在18-40间
var reg7 = /^1[89]|[23][0-9]|40$/
// 8.身份证号码：15或18位，如果是15位则全部为数字，如果为18位，前17位为数字，第18位为数字或字母x，字母不区分大小写
var reg8 = /^\d{15}|\d{17}(\d|x)$/i
// 9.中文名字：三个汉字、中间必须是小或晓
var reg9 = /^$/
// 10.字符串去重
var reg10 = /^$/
// 11.给定任何一串数字将其转换为科学计数法(10000 => 10.000)
var reg11 = /^$/

// console.log(reg4.test('ac132.zip'));
console.log(reg7.test(1));


// 给一个连字符串例如：get-element-by-id转化成驼峰形式。
var s1 = "get-element-by-id"
var f = (s)=> s.replace(/-\w/g, function (x) { return x.slice(1).toUpperCase(); });
console.log(f(s1));